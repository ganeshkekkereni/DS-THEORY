HEAP SORT
Heap sort is same as comparision sorting technique, its based on binary heap and it is same selection sort. find the minimum element swap its with correct postion.
how does  heapify works:-
    heapify consists of min heap or max heap 
    min heap = parent element is lesser than the child nodes  ex:- 2 with child nodes 3, 4;
    max heap = parent element is greater than the child nodes ex:- 4 with child nodess 2, 3;
    
Array = {1, 3, 5, 4, 6, 13, 10, 9, 8, 15, 17}
Corresponding Complete Binary Tree is:

                 1
              /     \
           3         5
        /    \     /  \             __    left side must completely filled
      4      6   13  10
     / \    / \
   9   8  15 17

The task to build a Max-Heap from above array.

Total Nodes = 11.
Last Non-leaf node index = (11/2) â€“ 1 = 4.
Therefore, last non-leaf node = 6.

To build the heap, heapify only the nodes: [1, 3, 5, 4, 6] in reverse order.

Heapify 6: Swap 6 and 17.

                 1
              /     \
           3         5
        /    \      /  \
     4      17   13  10
    / \    /  \
  9   8  15   6

Heapify 4: Swap 4 and 9.

                 1
              /     \
           3         5
        /    \      /  \
     9      17   13  10
    / \    /  \
  4   8  15   6

Heapify 5: Swap 13 and 5.

                 1
              /     \
           3         13
        /    \      /  \
     9      17   5   10
    / \    /  \
 4   8  15   6

Heapify 3: First Swap 3 and 17, again swap 3 and 15.

                 1
             /     \
        17         13
       /    \      /  \
    9      15   5   10
   / \    /  \
 4   8  3   6

Heapify 1: First Swap 1 and 17, again swap 1 and 15, finally swap 1 and 6.

                 17
              /      \
          15         13
         /    \      /  \
       9      6    5   10
      / \    /  \
    4   8  3    1
    
    
HEAP SORT ALGORITHM:-

first convert array into heap data structure then heapify into max heap. now delete max element element and replace it with the last node.
repeats the process untill the heap size greater than one.

Detailed Working of Heap Sort

arr = {4, 10, 3, 5, 1}  where n = number of elements = 5
step 1:- build complete binary tree
                   4
                 /   \
                10    3
               /  \
              5    1
           i = n/2-1 = 5/2-1 = 2.5-1 = 1.5 =~ 1; where we need heapify at the index 1;
 step 2:- 
                 10
                /   \
               4     3
             /   \
             5    1
 step 3:-
              10
             /  \
            5    3
           / \
          4   1    
         Now it is in max heap
         
step 4:- now delete root node and place last leaf node in root postion
                   1
                /  \   
               5    3   
              /
             4    arr = { 10 }
         
step 5:- now heapify the existing tree
         here it is
                 1                            5                                          1                     4                                    1         3
                /  \      heapify            / \                                        / \     heapify       / \                                  /         /
               5    3   ----------->        4   3   now delete top element  ------>    4   3   ---------->   1   3  now delete top element -----> 3    ---> 1
              /                            /
             4                            1      arr = { 5, 10}                                                      arr = { 4, 5, 10}
             
             now delete top element arr = { 3, 4, 5, 10}; and then arr = { 1, 3, 4, 5, 10};
   heap sort = 1, 3, 4, 5, 10.
              
   
   heap sort.cpp
  // C++ program for implementation of Heap Sort

#include <iostream>
using namespace std;

// To heapify a subtree rooted with node i
// which is an index in arr[].
// n is size of heap
void heapify(int arr[], int N, int i)
{

	// Initialize largest as root
	int largest = i;

	// left = 2*i + 1
	int l = 2 * i + 1;

	// right = 2*i + 2
	int r = 2 * i + 2;

	// If left child is larger than root
	if (l < N && arr[l] > arr[largest])
		largest = l;

	// If right child is larger than largest
	// so far
	if (r < N && arr[r] > arr[largest])
		largest = r;

	// If largest is not root
	if (largest != i) {
		swap(arr[i], arr[largest]);

		// Recursively heapify the affected
		// sub-tree
		heapify(arr, N, largest);
	}
}

// Main function to do heap sort
void heapSort(int arr[], int N)
{

	// Build heap (rearrange array)
	for (int i = N / 2 - 1; i >= 0; i--)
		heapify(arr, N, i);

	// One by one extract an element
	// from heap
	for (int i = N - 1; i > 0; i--) {

		// Move current root to end
		swap(arr[0], arr[i]);

		// call max heapify on the reduced heap
		heapify(arr, i, 0);
	}
}

// A utility function to print array of size n
void printArray(int arr[], int N)
{
	for (int i = 0; i < N; ++i)
		cout << arr[i] << " ";
	cout << "\n";
}

// Driver's code
int main()
{
	int arr[] = { 12, 11, 13, 5, 6, 7 };
	int N = sizeof(arr) / sizeof(arr[0]);

	// Function call
	heapSort(arr, N);

	cout << "Sorted array is \n";
	printArray(arr, N);
}

         
           
